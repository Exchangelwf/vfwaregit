//add by jwd on 20160108#ifdef WIN32  #pragma warning( disable : 4786)#endif#ifndef _NETWORKSERVICE_GENIECLINETPROC_H#define _NETWORKSERVICE_GENIECLINETPROC_H#include <string>#include <map>#ifdef WIN32typedef void * threadfunc_t;#elif defined(LINUX)#include <pthread.h>typedef void * threadfunc_t;#endif //WIN32#include <vector>#include "system/Object.h"#include "multitask/Thread.h"#include "multitask/Mutex.h"#include "multitask/Timer.h"#include "networkservice/NetCore.h"#include "system/File.h"#include "common/BaseTypedef.h"#include "networkapi/wjalink_api.h"#include "networkapi/wjalink_callback.h"#ifndef WIN32	#include <sys/types.h>	#include <sys/socket.h>	#include <sys/ioctl.h>	#include <netinet/in.h>	#include <netinet/tcp.h>	#include <fcntl.h>	#include <arpa/inet.h>	#include <netdb.h>	#include <errno.h>	#include <stdio.h>	#include <iostream>	#include <unistd.h>	#define SOCKET_ERROR -1	#define INVALID_SOCKET -1		typedef unsigned short WORD;	typedef int SOCKET;	typedef struct sockaddr_in SOCKADDR_IN;	typedef struct hostent* LPHOSTENT;	typedef struct servent* LPSERVENT;	typedef struct in_addr* LPIN_ADDR;	typedef struct sockaddr* LPSOCKADDR;	#define    ERRNO                errno#else	#include <winsock2.h>	#include <time.h>	#pragma comment(lib, "ws2_32.lib")#endifusing namespace std;namespace NETWORKSERVICE{#define DEFAULT_BIT_RATE 1600 	typedef enum _enm_aio_type_t	{		DEV_REGISTER      	= 1,     //设备向服务器注册		QUERY_DEV_STATUS  	= 2,     //设备状态		QUERY_DEV_WIFI    	= 3,     //WIFI信息		MOD_DEV_WIFI      	= 4,    //修改WIFI信息		QUERY_DEV_LOG     	= 5,	 // 查询日志	    RESP_DEV_LOG      	= 6,		QUERY_DEV_SNAP    	= 7,    //抓图		RESP_DEV_SNAP     	= 8,		UPDATA_VESION      	= 9,    //设备升级		UPDATA_NOW       	= 10,		KEEP_ALIVE		 	= 11,   //设备心跳包 		RECORD_DOWNLOAD   	= 12,   //请求录像下载		RESP_RCORD_DOWNLOAD = 13,   //录像下载		RESP_RCORD_STOP     = 14,   //录像结束	   		QUERY_DEV_RECORD   = 15,	//查询录像		RESP_DEV_RCORD		=16,	//录像查询回复		QUERY_RECORD_PLAYBACK = 17,  //请求录像回放		RESP_RECORD_PLAYBACK  = 18,  //录像回放回复		RECORD_PLAYBACK_PRIVIEW = 19, //录像回放预览		CTRL_RECORD_PLAYBACK = 20,	 //录像回放控制		CTRL_VIDEO_PREVIEW	 = 21,	 //视频预览控制		VIDEO_PREVIEW_DATA	 = 22,	 //视频预览	   	}ENM_MSG_ALLINONE_TYPE;	struct devstatus{		int iDevStatus;    //设备运行状态		int iDiskStatus;    //硬盘状态		int iDiskCap;       //硬盘容量		int iDiskReCap;     //硬盘剩余容量		int iDev4gStatus;   //4G状态		int iDevWifiStatus; //WIFI状态		char verdata[64];   //版本信息		WJA_SYSTEM_TIME StartTime; //开机时间	};	struct WIFI_Info{		int iEnable;		char szSsid[32];		char szPswd[32];	};	class CIVnPdu;	/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-*/	class CClientUpgrate: public CObject	{	public:		CClientUpgrate(string uploaddir,string uploadfilename);		~CClientUpgrate();		bool Start(int iFilelen);			void Stop();		int  UpgrateStatus();		void SetConnect(struct conn *c);		void AppendData(char *buf, int len);		int  TimerCheck(int arg);		bool SendUpgrateStatus(int status);	private:				CTimer  m_ctimer;		CFile  *m_file;		int     m_ifiletotal;  //文件总大小 		int     m_ifilecurrent; //当前接收的大小		int     m_ifilecurrent_last; //定时检测升级存活，当60s没有数据接收，关闭连接		int     m_istatus;		struct conn *m_pConect;		string WEB_UPDATE_TMPDIR;		string WEB_UPDATE_FILENAME;	};	class CNetWorkClient : public CThread	{	public:	    	    //PATTERN_SINGLETON_DECLARE(CNetWorkClient);	    CNetWorkClient();	    virtual ~CNetWorkClient();	    int Run(Wja_InitNetworkParam para);	    int Stop();	    virtual void ThreadProc();		static void NetClientFree(void* buf);	//    struct sockaddr_in *GetRemoteAddr();	    bool ConnectRemoteServer();		int  NetClientRecv();		int  NetClientPoll(int milliseconds);		int  NetClientIoInit();		int  NetClientFreeBuf();		struct conn  GetConnect();	    void CloseSocket();	    void NetClientIoProcess();	    virtual void svc();	    int MsgProcess(char* buf, int len);		int TimerCheckBuf(int arg);		int TimerKeepLive(int arg);		int TimerGlinkKeepLive(int arg);	//video download		int RecordDownLoadTime(CIVnPdu*& pReqPDU, CIVnPdu*& pRespPDU);		int RecordSendStart(CIVnPdu*& pReqPDU, CIVnPdu*& pRespPDU);		int RecordSendStop(CIVnPdu*& pReqPDU, CIVnPdu*& pRespPDU);		int RecordDownLoadSend(unsigned char channel,                            							void* Data, 						unsigned DataLen,unsigned int clientid,callback fun,void* arg);	//video replay		int RecordFileSearch(CIVnPdu*& pReqPDU, CIVnPdu*& pRespPDU);		int RecordFileOpen(CIVnPdu*& pReqPDU, CIVnPdu*& pRespPDU);		int RecordPlayBackStart(CIVnPdu*& pReqPDU, CIVnPdu*& pRespPDU);		int RecordPlayBackControl(CIVnPdu*& pReqPDU, CIVnPdu*& pRespPDU);		int RecordPlayBackSend(	unsigned char channel, 							char isIFrame, 							void* Data, 						unsigned DataLen,callback fun,void* arg);	//realtime video		int RealTimeVideoPlayCtrl(CIVnPdu*& pReqPDU, CIVnPdu*& pRespPDU);		//发送视频		int RealTimevideodataSend( unsigned char  channel,						unsigned char ismainorsub,			                    char isIFrame, 			                    void* Data, 			                    unsigned  DataLen,callback fun,void* arg);	//snap		int SnapStart(CIVnPdu*& pReqPDU, CIVnPdu*& pRespPDU);		int SnapvideodataSend(unsigned char channel,                            							void* Data, 						unsigned DataLen,callback fun,void* arg);	//device status		int GetDevStatus(const DVRIP* Req, CIVnPdu*& pRespPDU);		int GetWifiInfo(CIVnPdu*& pReqPDU, CIVnPdu*& pRespPDU);		int SetWifiInfo(CIVnPdu*& pReqPDU, CIVnPdu*& pRespPDU);	//Log		int	LogInfoSearch(CIVnPdu*& pReqPDU, CIVnPdu*& pRespPDU);		public:    		int m_bExitNetThread; 		bool m_bIsNetRunning; 		bool m_bRegisterFlag; 		int m_iRecvFlag;		int m_iRecvLen;		int m_iOnline;		int m_iKeepStatus; //心跳响应		struct io    m_remote;                	/* Remote IO buffer        */		struct conn  m_conect;//发送视频数据		//CClientSnap *m_snap;		CClientUpgrate *m_upgrate;		CTimer  m_ctimer;  //定时清空recvbuf 		CTimer  m_cKeepLive; //心跳定时器	private:		Wja_InitNetworkParam	inputpara;	};	class CNetWorkClientFactory	{	public:		static CNetWorkClient * instance();	};#define g_NetworkServiceClient ( *NETWORKSERVICE::CNetWorkClientFactory::instance() )	/*-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-*/}#endif // _GENIESERVERPROC_H